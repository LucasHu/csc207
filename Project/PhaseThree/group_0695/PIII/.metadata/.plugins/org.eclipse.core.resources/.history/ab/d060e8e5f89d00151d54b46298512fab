package manager;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.ConsoleHandler;
import java.util.logging.Level;
import java.util.logging.Logger;

import user.Client;

public class ClientManager implements Serializable{

    /**
     *
     */
    private static final long serialVersionUID = 1L;

    private Map<String, Client> clients;

    private String filePath;

    private static final Logger logger =
            Logger.getLogger(ClientManager.class.getPackage().getName());

    private static final ConsoleHandler consoleHandler = new ConsoleHandler();

    public ClientManager(File file) throws ClassNotFoundException, IOException {

        this.clients = new HashMap<String, Client>();

        // Associate the handler with the logger.
        logger.setLevel(Level.ALL);
        consoleHandler.setLevel(Level.ALL);
        logger.addHandler(consoleHandler);

        // Populate the students HashMap using serialized data stored in file,
        // if it exists.  If not, create a new empty file for it to be saved in
        // later.
        if (file.exists()) {
            readFromFile(file.getPath());
        } else {
            file.createNewFile();
        }

        // Records the path of the serialized data file.
        this.filePath = file.getPath();
    }

    public void add(Client client) {
        this.clients.put(client.getEmail(), client);

        // Log the addition of a client.
        logger.log(Level.FINE, "Added a new client " + client.returnClient());
    }

    public void update(Client client) {

        this.clients.put(client.getEmail(), client);

        // Log the addition of a client.
        logger.log(Level.FINE, "Update a client " + client.returnClient());

    }


    public void saveToFile() {

        try {

            OutputStream file = new FileOutputStream(filePath);
            OutputStream buffer = new BufferedOutputStream(file);
            ObjectOutput output = new ObjectOutputStream(buffer);

            // Serialize the students Map.
            output.writeObject(clients);

            logger.log(Level.FINE, "Serialized client manager.");

            output.close();

        } catch(IOException ex) {

            logger.log(Level.SEVERE, "Cannot perform output. File I/O failed.", ex);
        }
    }

    @SuppressWarnings("unchecked")
    private void readFromFile(String path) {

        try {
            InputStream file = new FileInputStream(path);
            InputStream buffer = new BufferedInputStream(file);
            ObjectInput input = new ObjectInputStream(buffer);

            // Deserialize the students Map.
            this.clients = (Map<String,Client>) input.readObject();
            input.close();
        } catch (IOException ex) {
            logger.log(Level.SEVERE, "Cannot read from input.", ex);
        }  catch (ClassNotFoundException ex) {
            logger.log(Level.SEVERE, "Cannot find class.", ex);
        }
    }

    //a helper function to test if the client is in the manager.
    public boolean hasTheClient(Client client) {

        Client tempClient = this.clients.get(client.getEmail());

        if (tempClient != null) {

            return true;

        } else {

            return false;

        }
    }

    public Map<String, Client> getClients() {
        return this.clients;
    }

}
