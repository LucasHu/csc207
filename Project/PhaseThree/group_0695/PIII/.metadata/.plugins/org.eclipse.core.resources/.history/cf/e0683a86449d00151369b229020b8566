package manager;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.ConsoleHandler;
import java.util.logging.Level;
import java.util.logging.Logger;

import flight_itinerary_search.Flight;

public class FlightManager implements Serializable{

    /**
     *
     */
    private static final long serialVersionUID = 1L;

    private Map<String, Flight> flights;

    private String filePath;

    private static final Logger logger = Logger.getLogger(FlightManager.class.getPackage().getName());

    private static final ConsoleHandler consoleHandler = new ConsoleHandler();

    public FlightManager(File file) throws ClassNotFoundException, IOException {
        flights = new HashMap<String, Flight>();

        // Associate the handler with the logger.
        logger.setLevel(Level.ALL);
        consoleHandler.setLevel(Level.ALL);
        logger.addHandler(consoleHandler);


        if (file.exists()) {
            readFromFile(file.getPath());
        } else {
            file.createNewFile();
        }

        // Records the path of the serialized data file.
        this.filePath = file.getPath();
    }

    /**
     * Reads serialized student data from file at path and populates
     * this StudentManager's map with that data.
     * @param path
     */
    private void readFromFile(String path) {

        try {
            InputStream file = new FileInputStream(path);
            InputStream buffer = new BufferedInputStream(file);
            ObjectInput input = new ObjectInputStream(buffer);

            // Deserialize the flights Map.
            flights = (Map<String,Flight>) input.readObject();
            input.close();
        } catch (IOException ex) {
            logger.log(Level.SEVERE, "Cannot read from input.", ex);
        }  catch (ClassNotFoundException ex) {
            logger.log(Level.SEVERE, "Cannot find class.", ex);
        }
    }

    public void add(Flight flight) {

        flights.put(flight.getFlightNumber(), flight);

        // Log the addition of a flight.
        logger.log(Level.FINE, "Added a flight " + flight.getFlightNumber());
    }

    public void update(Flight flight) {

        this.flights.put(flight.getFlightNumber(), flight);

        // Log the addition of a flight.
        logger.log(Level.FINE, "Update a flight " + flight.getFlightNumber());

    }

    //a helper function to test if the flight is in the manager.
    public boolean hasTheFlight(Flight flight) {

        Flight tempFlight = this.flights.get(flight.getFlightNumber());

        if (tempFlight != null) {
            
            return true;

        } else {

            return false;

        }
    }


}
