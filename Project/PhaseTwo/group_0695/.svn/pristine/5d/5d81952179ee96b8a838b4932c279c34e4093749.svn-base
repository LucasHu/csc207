package driver;

import java.io.IOException;
import java.util.List;

import flight_itinerary_search.Flight;
import flight_itinerary_search.Itinerary;
import user.Client;
import user.User;

/** A Driver used for autotesting the project backend. */
public class Driver {
	private static User tempUser = new User();

	/**
	 * Uploads client information to the application from the file at the given
	 * path.
	 * 
	 * @param path
	 *            the path to an input csv file of client information with lines
	 *            in the format:
	 *            LastName,FirstNames,Email,Address,CreditCardNumber,ExpiryDate
	 *            (the ExpiryDate is stored in the format YYYY-MM-DD)
	 * @throws IOException
	 */
	public static void uploadClientInfo(String path) throws IOException {

		tempUser.uploadClientFile(path);

	}

	/**
	 * Uploads flight information to the application from the file at the given
	 * path.
	 * 
	 * @param path
	 *            the path to an input csv file of flight information with lines
	 *            in the format:
	 *            Number,DepartureDateTime,ArrivalDateTime,Airline,Origin,
	 *            Destination,Price (the dates are in the format YYYY-MM-DD; the
	 *            price has exactly two decimal places)
	 * @throws IOException
	 */
	public static void uploadFlightInfo(String path) throws IOException {

		tempUser.uploadFlightFile(path);

	}

	/**
	 * Returns the information stored for the client with the given email.
	 * 
	 * @param email
	 *            the email address of a client
	 * @return the information stored for the client with the given email in
	 *         this format:
	 *         LastName,FirstNames,Email,Address,CreditCardNumber,ExpiryDate
	 *         (the ExpiryDate is stored in the format YYYY-MM-DD)
	 * @throws IOException
	 */
	public static String getClient(String email) throws IOException {
		
		List<Client> allClients = null;
		
		try {
			
			allClients = tempUser.readClientFile();
			
		} catch (Exception e) {

			e.printStackTrace();
		}
		for (Client o : allClients) {
			
			if (o.getEmail().equals(email)) {
				
				return o.returnClient();
				
			}
			
		}
		
		return null;
	}

	/**
	 * Returns all flights that depart from origin and arrive at destination on
	 * the given date.
	 * 
	 * @param date
	 *            a departure date (in the format YYYY-MM-DD)
	 * @param origin
	 *            a flight origin
	 * @param destination
	 *            a flight destination
	 * @return the flights that depart from origin and arrive at destination on
	 *         the given date formatted with one flight per line in exactly this
	 *         format: Number,DepartureDateTime,ArrivalDateTime,Airline,Origin,
	 *         Destination,Price (the dates are in the format YYYY-MM-DD; the
	 *         price has exactly two decimal places)
	 * @throws IOException
	 * @throws ClassNotFoundException
	 */
	public static String getFlights(String date, String origin,
			String destination) throws ClassNotFoundException, IOException {
		
		List<Flight> searchedFlights = tempUser.searchFlights(date, origin,
				destination);
		
		if (!searchedFlights.isEmpty()) {

			String returnedList = "";

			for (Flight o : searchedFlights) {

				returnedList = returnedList + o.returnFlightWithTimeCost();

			}

			return returnedList;

		} else {

			return null;

		}
		
	}

	/**
	 * Returns all itineraries that depart from origin and arrive at destination
	 * on the given date. If an itinerary contains two consecutive flights F1
	 * and F2, then the destination of F1 should match the origin of F2. To
	 * simplify our task, if there are more than 6 hours between the arrival of
	 * F1 and the departure of F2, then we do not consider this sequence for a
	 * possible itinerary (we judge that the stopover is too long).
	 * 
	 * @param date
	 *            a departure date (in the format YYYY-MM-DD)
	 * @param origin
	 *            a flight original
	 * @param destination
	 *            a flight destination
	 * @return itineraries that depart from origin and arrive at destination on
	 *         the given date with stopovers at or under 6 hours. Each itinerary
	 *         in the output should contain one line per flight, in the format:
	 *         Number,DepartureDateTime,ArrivalDateTime,Airline,Origin,
	 *         Destination followed by total price (on its own line, exactly two
	 *         decimal places), followed by total duration (on its own line, in
	 *         format HH:MM).
	 * @throws IOException
	 * @throws ClassNotFoundException
	 */
	public static String getItineraries(String date, String origin,
			String destination) throws ClassNotFoundException, IOException {

		List<Itinerary> searchedItineraries = tempUser
				.searchedItinerariesList(date, origin, destination);

		if (!(searchedItineraries.isEmpty())) {

			String returnedItineraries = "";

			for (Itinerary o : searchedItineraries) {

				returnedItineraries = returnedItineraries + o.returnItinerary();

			}
			
			return returnedItineraries;

		} else {

			return null;

		}

	}

	/**
	 * Returns the same itineraries as getItineraries produces, but sorted
	 * according to total itinerary cost, in non-decreasing order.
	 * 
	 * @param date
	 *            a departure date (in the format YYYY-MM-DD)
	 * @param origin
	 *            a flight original
	 * @param destination
	 *            a flight destination
	 * @return itineraries (sorted in non-decreasing order of total itinerary
	 *         cost) that depart from origin and arrive at destination on the
	 *         given date with stopovers at or under 6 hours. Each itinerary in
	 *         the output should contain one line per flight, in the format:
	 *         Number,DepartureDateTime,ArrivalDateTime,Airline,Origin,
	 *         Destination followed by total price (on its own line, exactly two
	 *         decimal places), followed by total duration (on its own line, in
	 *         format HH:MM).
	 * @throws IOException
	 * @throws ClassNotFoundException
	 */
	public static String getItinerariesSortedByCost(String date, String origin,
			String destination) throws ClassNotFoundException, IOException {
		
		List<Itinerary> sortedSearchedItinerariesByCost = tempUser
				.sortItinerariesListByCost(date, origin, destination);
		
		if (!(sortedSearchedItinerariesByCost.isEmpty())) {

			String returnedItineraries = "";

			for (Itinerary o : sortedSearchedItinerariesByCost) {

				returnedItineraries = returnedItineraries + o.returnItinerary();

			}

			return returnedItineraries;

		} else {

			return null;

		}

	}

	/**
	 * Returns the same itineraries as getItineraries produces, but sorted
	 * according to total itinerary travel time, in non-decreasing order.
	 * 
	 * @param date
	 *            a departure date (in the format YYYY-MM-DD)
	 * @param origin
	 *            a flight original
	 * @param destination
	 *            a flight destination
	 * @return itineraries (sorted in non-decreasing order of travel itinerary
	 *         travel time) that depart from origin and arrive at destination on
	 *         the given date with stopovers at or under 6 hours. Each itinerary
	 *         in the output should contain one line per flight, in the format:
	 *         Number,DepartureDateTime,ArrivalDateTime,Airline,Origin,
	 *         Destination followed by total price (on its own line, exactly two
	 *         decimal places), followed by total duration (on its own line, in
	 *         format HH:MM).
	 * @throws IOException
	 * @throws ClassNotFoundException
	 */
	public static String getItinerariesSortedByTime(String date, String origin,
			String destination) throws ClassNotFoundException, IOException {
		
		List<Itinerary> sortedSearchedItinerariesByTime = tempUser
				.sortItinerariesListByTime(date, origin, destination);

		if (!(sortedSearchedItinerariesByTime.isEmpty())) {

			String returnedItineraries = "";

			for (Itinerary o : sortedSearchedItinerariesByTime) {

				returnedItineraries = returnedItineraries + o.returnItinerary();

			}

			return returnedItineraries;

		} else {

			return null;

		}

	}
	
}
